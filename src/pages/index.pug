extends .layout.inc.pug

block vars
  - var title = "Personal projects"
  - metaDescription = "Welcome to my personal website. Find here an explained list of my personal IT projects. "

block content
  .intro
    p I realized this small website to present my personal IT projects. The number of my Github repositories keeps growing (for serious ou fun projects) and I wanted to show them in a more orderly way. For every project I explain why and how & and provide a screenshot and a link to the repository where you can find the actual code. I hope some of them will get your attention.
  +glossary
  section#projects
    +svgDecoration
    +project("October 2020", "Yoga Website - Booking, Payment & Mailing", "https://github.com/joe-ambrosio/joeambrosioyoga.com", "https://raw.githubusercontent.com/joe-ambrosio/joeambrosioyoga.com/master/screenshot.png", ["API", "Python", "AWS", "Lambda", "DynamoDB", "Cloudformation", "Web", "CSS", "JS", "Zoom", "Stripe", "Sendinblue", "Amplitude", "Jekyll"])
      p I needed to create a complete online solution to manage remote Yoga lessons.
      p That meant a website to welcome visitors and a way to book available lessons. A payment integration was also needed with refund, postpone and cancel options. But also a mailing solution to batch send Zoom links when a lesson was about to start and some customer insights on the platform. At last, all this needed to run cheap : it was cheap indeed, I made all this work for free.
      p The easy part was the website. I used Jekyll since it's available with GitHub pages, which are free to run. The website being mainly static, this was an obvious choice. The website is responsive and lightweight to maximize user conversion.
      p Then, I created an "admin dashboard" to create new yoga lessons. This part is not available publicly on my GitHub. Basically it's a AWS Cloudformation stack with an API Gateway, a DynamoDB database and some Python Lambdas. When connected to a well-known URL, one can create new lessons. On submission, the Zoom API is called to create a new scheduled meeting, Stripe is called to create a new product and a new entry in DynamoDB is saved. At this point, this lesson is now displayed and bookable on the website (lessons are queried via the API).
      p When someone book a lesson, we collect the payment via Stripe in a few clicks (the Apple Pay integration was convincing). When the system receive the Stripe confirmation callback, a transactional confirmation email is sent. In this email, this user receive his private account link which he can use to manage his lessons. He can postpone any lesson to another open booking, credit his account when cancelling one lesson (so his next booking is free or discounted) or ask for a refund. It was essential to empower the user so all those actions were available in a few clicks with no hustle.
      p This was a fantastic project, well used during the 2020-? stay-at-home period. So many technical bricks were necessary and exposed to real users with real money : everything needed to be optimized and polished. And thanks the power of serverless and careful pick of integrations, this stack practically runs for free. Overall one of the nicest personal project I ever did for sure.
      p
        a(href="https://joeambrosioyoga.com/") View the website
    +project("December 2017", "VPN on the Go", "https://github.com/sd65/VPN-on-the-Go", "https://raw.githubusercontent.com/sd65/VPN-on-the-Go/master/screenshot.png", ["API", "Linux", "Hardware", "Python", "AWS", "Lambda", "Cloudformation", "Web", "JS", "VPN"])
      p This project was born when I occasionally needed a VPN. Having played a bit more with AWS and Cloudformation, it was the perfect time to use it for personal projects.
      p Consisting of a single Cloudformation file, this stack creates a S3 bucket, some Lambda functions and an API Gateway. The API Gateway statically serves under a well-known path a web page. When entering the correct password, you land on the VPN on the Go dashboard when you can see available VPNs. Every VPN is a EC2 instance configured with softethervpn offering L2TP/IPSec PSK and OpenVPN connections, supporting a large range of clients. To ease the OpenVPN connection, the client configuration file is available to download from S3. Since I usually only needed a VPN for a few hours, an auto destroy option is available : the EC2 instance and all configuration could be erased automatically after a certain time.
      p This project was very fun to create and helped me a lot. Being able to easily create on the spot VPN instances with new IPs for cheap always seemed like magic.
    +project("November 2017", "DHome", "https://github.com/sd65/DHome", "https://raw.githubusercontent.com/sd65/DHome/master/screenshot.png", ["API", "Linux", "Hardware", "CSS", "Node.js", "JS", "Web", "React", "npm", "InfluxDB", "Docker"])
      p
        | I just brought a new toy : 
        a(href="https://www.ti.com/tool/CC2650STK") a SensorTag
        | . This little bad boy is able to record a lot of metrics like temperature, humidity, pressure, etc. I wanted to save those metrics and present them in a nice day. Furthermore, I wanted to add weather and public transport information as I did in 
        a(href="#wm8650") a previous project
        | , and some lights control.
      p That's why a created some Dockerfiles to, first create a Node.js app gathering metrics for the SensorTag every few minutes and storing them in a database, an API able to get those stored metrics and pilot my Hue lights, and finally a web app to expose all this.
      p I created the web app with React to try this new fashionable library and found it very compelling. InfluxDB was chosen for this thanks to its ability to handle metrics, even though everything remains quite basic.
      p My Raspberry Pi was running this and I ran the web app on an old tablet, it was beautiful and made good usage of the SensorTag !
    +project("November 2017", "Gnome Shell - Office 365 Mail Checker", "https://github.com/sd65/Office-365-Mail-Checker", "https://raw.githubusercontent.com/sd65/Office-365-Mail-Checker/master/icons/o365-notification.svg", ["Gnome Shell", "Linux", "JS"])
      p I now inherited a new email address, a Office 365 one for work. Having no official Office 365 email app on Linux prevented me from getting notifications when receiving new emails. I didn't want to rely on the web app since (at the time) the Outlook browser notifications were not very reliable and I would have to open my browser and the Office 365 to tab to get it working at all time.
      p That's why I created a straightforward Gnome Shell extension to notify me in the taskbar when received a new email : problem solved.
    +project("April 2017", "My new resume", "https://github.com/sd65/CV", "https://raw.githubusercontent.com/sd65/CV/master/CV_Sylvain-Doignon.thumbnail.png", ["LaTeX"])
      p My previous resume was made with Photostop. Every edit was a nightmare: boot up a Windows VM, open the bloated Photostop, make the edit, re-align all the content, flatten all the layers, export it with the correct parameters... Furthermore Photoshop is not free as in speech or as in beer.
      p That's why I decided to make the same resume but with LaTeX which is a professional document preparation system. Basically, you declare the general layout, the content and LaTeX does all the formatting part. This is great! No more time is wasted on the layout.
      p 
        | This was my first real LaTeX document and I used the great
        |
        a(href="https://github.com/xdanaux/moderncv/") moderncv document class
        | . I only disliked the header layout so I made one myself.
      p Now, editing my resume is really easy. Fire up a text editor, make the edit and compile in seconds the corresponding PDF.
    +project("April 2017", "This website", "https://github.com/sd65/sd65.github.io", "img/codeScreenshot.png", ["Web", "Shell scripts", "npm", "LESS", "CSS", "Pug"])
      p Created to explain and present my projects in a more practical manner that Github does.
      p Made from scratch, easily editable & hosted on Github.
      p This website is defined by meta-language, such as LESS & Pug who compiles respectively to CSS & HTML. This allows the code to be as small as possible and very modular. Furthermore, when in development, I've added a watcher on some files to automatically launch the build process. In this way, there is no "build time" drawback.
      p Code strive to be minimal. This project permitted to acquaint myself with the relatively new CSS flexbox positioning system.
    +project("December 2016", "My Terminal Dashboard", "https://github.com/sd65/MyTerminalDashboard", "https://raw.githubusercontent.com/sd65/MyTerminalDashboard/master/screenshots/screen1.png", ["Go", "Terminal app", "API"])
      p 
        | I always dreamed about a screen always on presenting some useful information. The low energy small laptop WM8650
        |
        a(href="#wm8650") from a previous project
        |
        | was a perfect device for this.
      p This device can't host an X server with good performance that's why a fancy way to create such a dashboard can be a terminal app. I've chosen the Go termui library to learn the Go language.
      p Extra, nobody likes to miss a train because it left just a few minutes ago. Also, the general train status is important. When all trains are cancelled because of an outage, it's better to anticipate. Furthermore, everybody likes weather forecasts. That's why I wanted my app to display all this information.
      p For this, this app fetches some information from the RATP & the Open Weather APIs.
      p The dashboard displays the following info :
      ul 
        li Trains status
        li Next trains
        li Next bus
        li General day information
        li Weather
          ul
            li Temperature
            li Cloud coverage
            li Wind speed
            li Rain
      p You can also control the house's light bulbs thanks to the Hue system.
      p This device is now used everyday and is very convenient. I never missed a bus or discovered a cancelled train while in the station!
    +project("November 2016", "Astronomy Picture of the Day", "https://play.google.com/store/apps/details?id=com.doignon.sylvain.apodnasa", "https://lh3.googleusercontent.com/oiq7l9HuqPVw0aBTcp9LhWJ5gzakdqzu_dK70gnSofV2dNuhH1S4lcUbpKJ4S7T3tzw=h450", ["Android", "Java", "API"])
      p This project was my third Android app but the first really useful one: this app fetches and present the NASA's Picture of The Day.
      p I started this project for a school project intended to learn images gesture on Android. But instead of the dumb and useless app requested, I wanted to make this app useful. Therefore, I pushed the instructions further and came with this idea of presenting beautiful images (with gestures support, of course) but along with other features. Such as:
      ul 
        li Fetch the last two NASA Pictures of the Day
        li Create a date picker to view a past picture
        li Open the related NASA website
        li Share the app with your friends
        li Great UI?
      p This app has been great fun. I still have the app on my phone to learn space things and this app is often downloaded by people all around the globe.
    +project("November 2016", "MiniList", "https://play.google.com/store/apps/details?id=com.doignon.sylvain.simpletodo", "https://lh3.googleusercontent.com/cOE9SoDG3nfttLsd6XjatnO99QXyUf7vWyKyZOKAzoRn8UhdcyLLhW9IojxeL4CN6jY=h450", ["Android", "Java"])
      p My second Android app was very educational and kind of useful. In fact, this app is the classic TODO app.
      p This app manages notes. Each note can have a deadline and a priority. Then, you set the task as "done". The main view allows the notes to be sorted by numerous criteria.
      p This project permitted to learn the intent, activity and list view objects in Android.
    +project("November 2016", "Temperature Convertor", "https://play.google.com/store/apps/details?id=com.doignon.sylvain.temperatureconvertor", "https://lh3.googleusercontent.com/7mlyOrQmbwWtPhnlKsmdGkEkhHmCm29N1CLfKQoK6cAjbxufccFXI-JFb6MRwCIQbQ=h450", ["Android", "Java"])
      p This is a school project. The instructions were to make a temperature converter with a UI app as simple as possible. That's why there are no buttons but only two fields that convert automatically the number you input.
      p This app permitted to discover the Android development that I always wanted to discover.
    +project("October 2016", "WM8650", "", "img/wm8650.jpg", ["OS", "Hardware", "Kernel", "Linux", "Firmware"])
      p This is one of my favourite challenge/project.
      p While friends were about to throw away this antique Android-only laptop (useless to them), I recovered this laptop challenging myself to install Linux on it.
      p First, this Chinese small laptop had one of the first release of Android : Froyo. It  was painfully slow on this device and not usable at all: who support Android 2.2 nowadays?
      p As i said, I decided to make it run Linux! The possibilities could be endless after that. This device uses uboot as a bootloader and supports booting from an SD card. Luckily, the architecture armv5 is quite common. I managed to find a great OS for it: ARM Arch Linux. Others had done this before but with older kernels. So I had to to cross compile a kernel, reboot by reboot, option by option to get this device up with the latest version of ARM Linux & the Kernel (4.7 at the time).
      p This has been great fun. I learned a ton about the kernel and the ARM architecture. And more importantly, this device is now useful! It has a fully working ethernet port, 3 USB ports, WIFI, small screen and keyboard!
    +project("September 2016", "My dotfiles", "", "https://dotfiles.github.io/images/dotfiles-logo.png", ["Linux", "Shell script"])
      p I love to tune everything to the perfection for my usage. So, after hours on various things (Zsh, Git, etc.) here's my dotfiles.
      p More info coming soon.
    +project("May 2016", "MiniVim", "https://github.com/sd65/MiniVim", "https://raw.githubusercontent.com/sd65/MiniVim/master/Screenshot.png", ["Vim", "Community"])
      p My first text editor was Sublime Text. I still like it. However it's not an open-source software and can't run in terminals. I always knew about Vim & Emacs but wasn't appealed by the apparent complexity and change.
      p When I had to edit a lot of files in terminals, I got tired of nano. That's why I managed to make Vim behave like Sublime Text. The MiniVim project was born.
      p I spend hours creating the most awesome vim configuration I could. That was very instructive. I discovered Vim a lot. The project is now quite big and complete and Vim is now much more intuitive for Sublime Text newcomers.
      p I use this tweaked Vim everyday at work or at home.
      p 
        | After Korben.info 
        |
        a(href="https://korben.info/minivim-chainon-manquant-entre-vim-sublimetext.html") made a post about it
        | , people took interest in the project and I had to manage it like a real small open-source project: issues, pull-requests, forks, etc.
      p This is my most successful project yet with over 270 Github stars.
    +project("May 2016", "Graf'hit.net", "http://grafhit.net", "https://raw.githubusercontent.com/sd65/New-Graf-hit/master/screenshot.jpg", ["Node.js", "JS", "Ajax", "MySQL", "Web"])
      p For a school project, we had to realize a website with a great UX. We didn't wanted to create another useless website so we ask around the university who wanted a new website. Graf'hit radio answered first.
      p We decided to develop the website using Node.js that I have been experimenting with a bit. At this occasion, I improved my Node.js skills and was my first website created with Node.js.
      p One interesting requested feature was the fact that you should be able to navigate on the website without the current audio stream interrupted. That means you can't just change the page when the visitor click a link but you have to dynamically update the content using Ajax.
      p This website has some great features and got myself to know about audio in HTML5: real-time, replays, etc. It was impressive and empowering to design a website for a real usage, a radio.
      p
        a(href="https://github.com/sd65/New-Graf-hit") Source code
    +project("March 2016", "Screensaver SVG-JS", "http://sd65.github.io/screensaver-SVG-JS/", "https://raw.githubusercontent.com/sd65/screensaver-SVG-JS/gh-pages/screenshot.png", ["SVG", "JS"])
      p I wanted to find a fun project for an evening and learn more about SVGs.
      p That's why I created a website recreating this old Windows XP screensaver which bounce a triangle across the screen edges.
      p
        a(href="https://github.com/sd65/screensaver-SVG-JS") Source code
    +project("February 2016", "Human2Cat Chrome Extension", "https://github.com/sd65/Human2Cat-Chrome-Extension", "https://raw.githubusercontent.com/sd65/Human2Cat-Chrome-Extension/master/screenshot.png", ["JS", "Chrome Extension"])
      p 
       | Following my 
       a(href="#human2catlanguage") Human2Cat language experiment
       | , I wanted to be able to translate text on the fly in the browser. Furthermore, at that time, I never wrote a browser extension.
      p When a text is selected, with a right-click or a hotkey, you see the translated text. When the selection is in an editable field, the content is replaced by the translation.
      p With this project, I discovered the Chrome extension API which is quite good in my opinion. This experiment is small but improved my knowledge about browsers.
      p This extension is now published on the Chrome Extension Store, I'm a happy man.
    +project("February 2016", "Human2Cat Language", "http://sd65.github.io/Human2Cat-Website/", "https://lh3.googleusercontent.com/DFRa6b9QYixwd2cJFlVO3OSZRVllTHLpLNjciKrmrKl75I_yWsKPWGQH9nXPAMTCiCmmXlXg=s640-h400-e365", ["JS", "Web", "Ciphers"])
      p Fascinated with ciphers, I wanted to create a small and fun one.
      p.
         This program can turn any text into a "cat language". => <i>grau, mio, Mio, Miaa, mi mia, miaa, Miouu, Miuu, miaa, Mi, Miou, mi Mii, Mi, miouu, mi miau, Miau, miaa, miouu, mi Mi, miouu, Miao, mi miau, Miu, miao, miau, mi Mio, miouu, miau, Miouu, mi Mi, mi mii Mii, Mi, miau, mi miou, Mi, miouu, Miuu, Miau, Mi, Miuu, Miu, mii miouu</i>
      p Then, you can convert it back with no information loss whatsoever. It's not encrypted at all, it's basically just a fancy way to store 8 bits (that way, all UTF-8 character sets are supported).
      p
        a(href="https://github.com/sd65/Human2Cat-Website") Source code
    +project("January 2016", "KikiBangBang", "https://github.com/sd65/KiKiBangBang", "https://raw.githubusercontent.com/sd65/KiKiBangBang/master/Screenshots/screenshot.png", ["Web", "Java EE", "Java", "MySQL"])
      p Java is, for now, not my cup of tea. However for a school project, in a group of two we  had to make a website with Java EE.
      p This website is KickStarter or IndieGogo basic copy. I knew nothing about Java EE at first so I learned a lot that way.
    +project("December 2015", "How much do you make per...?", "https://github.com/sd65/howMuchDoYouEarnPer", "https://raw.githubusercontent.com/sd65/howMuchDoYouEarnPer/gh-pages/screenshot.jpg", ["JS", "Web"])
      p I wanted to know how much I made in an hour, in a day, etc. I found no websites doing so.
      p Of course I could just grab a calculator. But, I can't be the only one wanting to know this: someone had to do it.
      p
        a(href="http://sd65.github.io/howMuchDoYouEarnPer/") Source code
    +project("December 2015", "Gnome Shell - Toggle Zoom", "https://extensions.gnome.org/extension/1012/toggle-zoom/", "https://camo.githubusercontent.com/ebefef321937de3ee835c38b80b747b65748c866/687474703a2f2f692e696d6775722e636f6d2f37394f666476522e706e67", ["Gnome Shell", "Linux", "JS"])
      p My laptop has a high resolution for its screen size. That means, sometimes, I can't read the texts because it's too small. In this was, I used xrandr to "scale" the display to a lower resolution.
      p But this solution needed to open a terminal and type something and was not very convenient. That's why I decided to add a shortcut to "toggle scaling/zoom" in my desktop environment ; Gnome Shell at the time.
      p My extension creates a small icon on the top right corner of the screen which is able to toggle the scaling. This worked and no more terminals were opened to change the scaling factor from this day.
    +project("December 2015", "Gnome Shell - DDCcontrol", "https://github.com/sd65/gnome-ddccontrol", "https://raw.githubusercontent.com/sd65/gnome-ddccontrol/master/screenshot.png", ["Gnome Shell", "Linux", "JS"])
      p I have an external monitor. I frequently change the brightness with the buttons under the monitor. However, this is not convenient and fast.
      p The DDC protocol exists to control the monitor settings through HDMI. That way, using a command line program, I was able to set my monitor brightness. Still, that was not enough fast and intuitive.
      p That's why a created another Gnome Shell extension that pop up a small window with a slider to change a monitor brightness. That way, I was satisfied.
    +project("June 2015", "Project Calendar", "https://github.com/sd65/Project-Calendar", "https://raw.githubusercontent.com/sd65/Project-Calendar/master/screenshot.png", ["C++", "Qt"])
      p For a school project, in a group of two we had to develop an C++ Qt Calendar application. That was the final project for a fascinating C++ course.
      p Features requested were;
      ul
        li Display week days
        li Create projects with corresponding tasks
        li Meta-Task can be created to gather sub tasks
        li Each task has a start date, an end date, etc.
        li Export all the projects
        li Create reminders
      p I took this project very seriously and I wanted to make the best app possible. Both code side and UI side. I worked hard, discovered Qt in depth to create this app.
      p Finally, we had the best grade for this app and we learned a lot.
    +project("November 2014", "UTC login bookmarklet", "http://sd65.github.io/utc-login-bookmarklet/", "https://raw.githubusercontent.com/sd65/utc-login-bookmarklet/master/screenshot.jpg", ["Bookmarklet", "JS", "Web"])
      p The SSO of my University forbids the web browser to remember credentials. While this is mainly a good idea, on my personal computer this is a struggle.
      p For this, I created a bookmarklet (a special bookmark that embeds Javascript code) to solve this problem. When you click on this special bookmark, it will redirect you to the SSO website if you're not already there. Then, it will automatically submit the form using your credentials.
      p As always, I like to share and help others. That's why I created a small website to allow everyone to create their own login-bookmarklet.
      p This website was a success was used by other students!
    +project("June 2014", "Travl", "https://github.com/sd65/travl", "https://raw.githubusercontent.com/sd65/travl/master/screenshot.jpg", ["PHP", "CMS", "JS", "SQLite", "Web"])
      p In summer 2014, my friends and I went on a long trip across Europe  hitchhiking. That was amazing. Before we began, I wondered how we could give news to our families.
      p Using our email address were not an option because it would be dangerous if we logged on a shared computer. Furthermore, we would be sentenced to include a long list of all the people we wanted to share news with.
      p That's why, we needed a website to post news. However, CMSs at the time were not very mobile friendly. So I had to develop a mobile-centric one!
      ul
        li The website is very small in size
        li The configuration is minimal, simply create a folder with each member you want to create
        li You can write articles easily, even on mobile. You can join pictures
      p During this long trip, this website was heavily used. Our parents loved it and we could share the address of this website to the people we met. That was a success!
    +project("May 2013", "Piwake", "https://github.com/sd65/PiWake", "https://raw.githubusercontent.com/sd65/PiWake/master/picture/screenshot.png", ["PHP", "Shell script", "MySQL", "JS", "Raspberry Pi"])
      p In my University, viewing the timetable was a nightmare. You had to click 7 times and log in every time. That could not last.
      p This was my first real project. In a nutshell, this website scrapped the Timetable server. Then, it parses the special files received. Then, it populates a database. Meanwhile, a website allowed to view the timetable very easily and... beautifully.
      p This project was a huge success. I started this website only for my personal convenience but soon lots of people in my class, then in other classes, used it.
      p I made two derivatives.
      p
        a(href="https://github.com/sd65/PiWake") Piwake
        | , the original
      p
        a(href="https://github.com/sd65/PiwakeLite") Piwake Lite
        | , a lighter version that only needed Javascript and fetched the timetable "live"
      p
        a(href="https://github.com/sd65/Austra") Austra
        | , or a project directed by the University itself to replace the original viewer including other enhancements.
      p This project was a ton of fun and very instructive. Having a website used by other people raised real world problem like availability (my Raspberry Pi sometimes crashed because of the unstable current).
    +project("May 2013", "PiMeal", "https://github.com/sd65/PiMeal", "https://raw.githubusercontent.com/sd65/PiMeal/master/screenshot.png", ["PHP", "SQLite", "Raspberry Pi"])
      p At that time, I lived in a family in Bordeaux and have to count my meal I took with them to pay them at the end of the month.
      p First, we had the "sheet of the fridge" system. It worked but was sometimes forgotten and you had to sum up at the end of the month something that a computer could do.
      p Also, I learned PHP in school during that time.
      p That's how my first PHP project was born: PiMeal. A small PHP page with a button on the bottom "Add a meal". Afterwards, depending of the time of the day, the meal would be stored in a database. And the global counter on the bottom was always up-to-date.
      p After that, it was a pleasure to add my meal and see how my app was working well!
    +project("May 2013", "My Raspberry Pi", "https://www.raspberrypi.org/", "img/rpi.jpg", ["Linux", "Raspberry Pi"])
      p My Raspberry Pi.
      p This was the beginning of a long journey (not yet finished) of various projects. I learned a lot about Linux and Internet thanks to it.
      p In fact, it was connected to the Internet and I brought a domain. Then I set up a dynamic DNS because it was hosted behind a non static IP router.
